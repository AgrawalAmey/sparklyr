% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml_feature_transformation.R
\name{ft_regex_tokenizer}
\alias{ft_regex_tokenizer}
\title{#' Feature Transformation -- OneHotEncoder
#'
#' One-hot encoding maps a column of label indices to a column of binary
#' vectors, with at most a single one-value. This encoding allows algorithms
#' which expect continuous features, such as Logistic Regression, to use
#' categorical features. Typically, used with  \code{ft_string_indexer()} to
#' index a column first.
#'
#' @template roxlate-ml-transformation
#' @param drop.last Boolean; drop the last category?
#'
#' @export
ft_one_hot_encoder <- function(x,
                               input.col,
                               output.col,
                               drop.last = TRUE,
                               ...)
{
  ml_backwards_compatibility_api()
  class <- "org.apache.spark.ml.feature.OneHotEncoder"
  invoke_simple_transformer(x, class, list(
    setInputCol  = ensure_scalar_character(input.col),
    setOutputCol = ensure_scalar_character(output.col),
    setDropLast  = ensure_scalar_boolean(drop.last)
  ))
}
#' Feature Tranformation -- Tokenizer
#'
#' A tokenizer that converts the input string to lowercase and then splits it
#' by white spaces.
#'
#' @template roxlate-ml-transformation
#'
#' @export
ft_tokenizer <- function(x,
                         input.col,
                         output.col,
                         ...)
{
  ml_backwards_compatibility_api()
  class <- "org.apache.spark.ml.feature.Tokenizer"
  invoke_simple_transformer(x, class, list(
    setInputCol  = ensure_scalar_character(input.col),
    setOutputCol = ensure_scalar_character(output.col)
  ))
}
Feature Tranformation -- RegexTokenizer}
\usage{
ft_regex_tokenizer(x, input.col, output.col, pattern, ...)
}
\arguments{
\item{x}{An object (usually a \code{spark_tbl}) coercable to a Spark DataFrame.}

\item{input.col}{The name of the input column(s).}

\item{output.col}{The name of the output column.}

\item{pattern}{The regular expression pattern to be used.}

\item{...}{Optional arguments; currently unused.}
}
\description{
A regex based tokenizer that extracts tokens either by using the provided
regex pattern to split the text (default) or repeatedly matching the regex
(if gaps is false). Optional parameters also allow filtering tokens using a
minimal length. It returns an array of strings that can be empty.
}
\seealso{
See \url{http://spark.apache.org/docs/latest/ml-features.html} for
  more information on the set of transformations available for DataFrame
  columns in Spark.

Other feature transformation routines: \code{\link{ft_count_vectorizer}},
  \code{\link{ft_quantile_discretizer}},
  \code{\link{ft_stop_words_remover}},
  \code{\link{sdf_mutate}}
}
