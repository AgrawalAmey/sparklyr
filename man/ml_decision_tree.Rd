% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml_classification_decision_tree_classifier.R,
%   R/ml_model_decision_tree.R, R/ml_regression_decision_tree_regressor.R
\name{ml_decision_tree_classifier}
\alias{ml_decision_tree_classifier}
\alias{ml_decision_tree}
\alias{ml_decision_tree}
\alias{ml_decision_tree_regressor}
\title{Spark ML -- Decision Trees}
\usage{
ml_decision_tree_classifier(x, max_depth = 5L, max_bins = 32L,
  min_instances_per_node = 1L, min_info_gain = 0, impurity = "gini",
  seed = NULL, thresholds = NULL, cache_node_ids = FALSE,
  checkpoint_interval = 10L, max_memory_in_mb = 256L,
  features_col = "features", label_col = "label",
  prediction_col = "prediction", probability_col = "probability",
  raw_prediction_col = "rawPrediction",
  uid = random_string("decision_tree_classifier_"), ...)

ml_decision_tree(x, formula = NULL, response = NULL, features = NULL,
  type = c("auto", "regression", "classification"),
  features_col = "features", label_col = "label",
  prediction_col = "prediction", variance_col = NULL,
  probability_col = "probability", raw_prediction_col = "rawPrediction",
  checkpoint_interval = 10L, impurity = "auto", max_bins = 32L,
  max_depth = 5L, min_info_gain = 0, min_instances_per_node = 1L,
  seed = NULL, thresholds = NULL, cache_node_ids = FALSE,
  max_memory_in_mb = 256L, uid = random_string("decision_tree_"), ...)

ml_decision_tree_regressor(x, features_col = "features",
  label_col = "label", prediction_col = "prediction", variance_col = NULL,
  checkpoint_interval = 10L, impurity = "variance", max_bins = 32L,
  max_depth = 5L, min_info_gain = 0, min_instances_per_node = 1L,
  seed = NULL, cache_node_ids = FALSE, max_memory_in_mb = 256L,
  uid = random_string("decision_tree_regressor_"), formula = NULL,
  response = NULL, features = NULL, ...)
}
\arguments{
\item{x}{A \code{spark_connection}, \code{ml_pipeline}, or a \code{tbl_spark}.}

\item{max_depth}{Maximum depth of the tree (>= 0); that is, the maximum
number of nodes separating any leaves from the root of the tree.}

\item{max_bins}{The maximum number of bins used for discretizing
continuous features and for choosing how to split on features at
each node. More bins give higher granularity.}

\item{min_instances_per_node}{Minimum number of instances each child must
have after split.}

\item{min_info_gain}{Minimum information gain for a split to be considered
at a tree node. Should be >= 0, defaults to 0.}

\item{impurity}{Criterion used for information gain calculation. Supported: "entropy"
and "gini" (default) for classification and "variance" (default) for regression. For
\code{ml_decision_tree}, setting \code{"auto"} will default to the appropriate
criterion based on model type.}

\item{seed}{Seed for random numbers.}

\item{thresholds}{Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value \code{p/t} is predicted, where \code{p} is the original probability of that class and \code{t} is the class's threshold.}

\item{cache_node_ids}{If \code{FALSE}, the algorithm will pass trees to executors to match instances with nodes.
If \code{TRUE}, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees.
Defaults to \code{FALSE}.}

\item{checkpoint_interval}{Set checkpoint interval (>= 1) or disable checkpoint (-1).
E.g. 10 means that the cache will get checkpointed every 10 iterations, defaults to 10.}

\item{max_memory_in_mb}{Maximum memory in MB allocated to histogram aggregation.
If too small, then 1 node will be split per iteration,
and its aggregates may exceed this size. Defaults to 256.}

\item{probability_col}{Column name for predicted class conditional probabilities.}

\item{raw_prediction_col}{Raw prediction (a.k.a. confidence) column name.}

\item{uid}{A character string used to uniquely identify the ML estimator.}

\item{...}{Optional arguments; currently unused.}

\item{formula}{Used when \code{x} is a \code{tbl_spark}. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see \link{ft_r_formula} for details.}

\item{response}{(Deprecated) The name of the response column (as a length-one character
vector.)}

\item{features}{(Deprecated) The name of features (terms) to use for the model fit.}

\item{type}{The type of model to fit. \code{"regression"} treats the response
as a continuous variable, while \code{"classification"} treats the response
as a categorical variable. When \code{"auto"} is used, the model type is
inferred based on the response variable type -- if it is a numeric type,
then regression is used; classification otherwise.}

\item{variance_col}{(Optional) Column name for the biased sample variance of prediction.}
}
\value{
The object returned depends on the class of \code{x}.

\itemize{
  \item \code{spark_connection}: When \code{x} is a \code{spark_connection}, the function returns an instance of a \code{ml_predictor} object. The object contains a pointer to
  a Spark \code{Predictor} object and can be used to compose
  \code{Pipeline} objects.

  \item \code{ml_pipeline}: When \code{x} is a \code{ml_pipeline}, the function returns a \code{ml_pipeline} with
  the predictor appended to the pipline.

  \item \code{tbl_spark}: When \code{x} is a \code{tbl_spark}, a predictor is constructed then
  immediately fit with the input \code{tbl_spark}, returning a prediction model.

  \item \code{tbl_spark}, with \code{formula}: specified When \code{formula}
    is specified, the input \code{tbl_spark} is first transformed using a
    \code{RFormula} transformer before being fit by
    the predictor. The object returned in this case is a \code{ml_model} which is a
    wrapper of a \code{ml_pipeline_model}.
}
}
\description{
Perform classification and regression using decision trees.
}
\details{
\code{ml_decision_tree} is a wrapper around \code{ml_decision_tree_regressor.tbl_spark} and \code{ml_decision_tree_classifier.tbl_spark} and calls the appropriate method based on model type.
}
\seealso{
See \url{http://spark.apache.org/docs/latest/ml-classification-regression.html} for
  more information on the set of supervised learning algorithms.

Other ml algorithms: \code{\link{ml_gbt_classifier}},
  \code{\link{ml_generalized_linear_regression}},
  \code{\link{ml_linear_regression}},
  \code{\link{ml_logistic_regression}},
  \code{\link{ml_multilayer_perceptron_classifier}},
  \code{\link{ml_naive_bayes}},
  \code{\link{ml_random_forest_classifier}}
}
