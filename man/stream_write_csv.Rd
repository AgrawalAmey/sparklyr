% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream_data.R
\name{stream_write_csv}
\alias{stream_write_csv}
\title{Write a Spark DataFrame to a CSV stream}
\usage{
stream_write_csv(x, path, trigger = stream_trigger(interval = 5000),
  header = TRUE, columns = NULL, infer_schema = TRUE, delimiter = ",",
  quote = "\\"", escape = "\\\\", charset = "UTF-8", null_value = NULL,
  options = list(), ...)
}
\arguments{
\item{x}{A Spark DataFrame or dplyr operation}

\item{path}{The path to the file. Needs to be accessible from the cluster.
Supports the \samp{"hdfs://"}, \samp{"s3a://"} and \samp{"file://"} protocols.}

\item{header}{Should the first row of data be used as a header? Defaults to \code{TRUE}.}

\item{delimiter}{The character used to delimit each column, defaults to \code{,}.}

\item{quote}{The character used as a quote. Defaults to \samp{'"'}.}

\item{escape}{The character used to escape other characters, defaults to \code{\\}.}

\item{charset}{The character set, defaults to \code{"UTF-8"}.}

\item{null_value}{The character to use for default values, defaults to \code{NULL}.}

\item{options}{A list of strings with additional options.}

\item{...}{Optional arguments; currently unused.}
}
\description{
Write a Spark DataFrame to a tabular (typically, comma-separated) stream.
}
\seealso{
Other Spark stream serialization: \code{\link{stream_read_csv}}
}
